Project Summary for AI Assistant (booking-and-accounts)

**Overall Goal:** Build a booking and multi-site management platform, initially for doggy daycare services, designed to be adaptable for other pet businesses.

**Current Status:** Core foundation is built using Next.js, Supabase (Auth & PostgreSQL), and React. Admin/Staff UI provides management capabilities, and a basic client booking interface exists.

**Key Implemented Features:**

1.  **Authentication:**
    *   Supabase Auth handles user sign-up and login.
    *   Sign-up/Login form (`src/components/AuthForm.tsx`) now has distinct modes, only showing necessary fields (Email/Password for Login; Name/Phone etc. for Sign Up).
    *   Role-based access is implemented:
        *   `clients` table stores client-specific info (first_name, last_name, phone), linked to `auth.users` via ID (UUID). **No role column here.**
        *   `staff` table stores staff info (name, role, phone_number), linked to `auth.users` via `user_id`. **Admin/Staff roles are defined here.**
    *   `README.md` includes instructions for creating the first admin user by inserting a record into the `staff` table.

2.  **Admin/Staff UI (within `src/app/page.tsx` using components in `src/components/admin/`):**
    *   **User Management:** View users, assign roles (client/staff/admin) via API call.
    *   **Site & Field Management:** Create/view sites and their associated fields (name, capacity, type).
    *   **Service Management:** Create/view services (name, description, requires_field_selection flag).
    *   **Service Availability Management:** Create/view rules defining when a service is available (linked to service, fields, times, days/date, capacity, active status).
    *   **Booking Management:** Manually create bookings (linking to field, times, service type, capacity), view existing bookings (including client name fetched via `booking_clients`).

3.  **Client UI (within `src/app/page.tsx` using `src/components/client/ClientBooking.tsx`):**
    *   Select service and date range.
    *   View available slots calculated by the backend (`/api/available-slots`).
    *   Slots are aggregated if `requires_field_selection` is false for the service, otherwise shown per field.
    *   **Same-day booking prevention:** The `/api/available-slots` route now filters out slots starting on the current date (UTC).
    *   Basic "Book Now" functionality exists, calling `/api/client-booking`.

**Database Schema Summary (Implemented Tables):**

*   `auth.users`: Managed by Supabase Auth (standard user data).
*   `public.sites`: Stores physical locations (id, name, address, is_active).
*   `public.fields`: Sub-locations within sites (id, site_id -> sites.id, name, capacity, field_type).
*   `public.services`: Defines offered services (id, name, description, created_at, requires_field_selection).
*   `public.service_availability`: Rules linking services to fields and times (id, service_id -> services.id, field_ids (array), start_time, end_time, days_of_week, specific_date, base_capacity, is_active, created_at).
*   `public.bookings`: Individual booking instances (id, field_id -> fields.id, start_time, end_time, service_type, status, max_capacity). *Client bookings are created via `/api/client-booking`, Admin bookings via `/api/bookings` POST.*
*   `public.clients`: Client user profiles (id -> auth.users.id, email, first_name, last_name, phone). **No role here.**
*   `public.staff`: Staff user profiles and roles (id, user_id -> auth.users.id, name, role, phone_number, notes). **Admin/Staff roles determined here.**
*   `public.booking_clients`: **Junction table** linking bookings to clients (id, booking_id -> bookings.id, client_id -> clients.id). Enables many-to-many relationship.
*   `public.pets`: Stores pet information (id, client_id -> clients.id, name, breed, etc.). *Currently captured during sign-up but full management UI not implemented.*
*   `public.payments`: Exists but likely not fully integrated yet (id, client_id, booking_id, amount, currency, status, created_at).

**File Structure Overview:**

*   `src/app/`: Next.js App Router structure.
    *   `page.tsx`: Main entry point, renders different views based on auth/role.
    *   `actions.ts`: Server actions for login/signup.
    *   `api/`: API route handlers (e.g., `users/route.ts`, `bookings/route.ts`, `available-slots/route.ts`).
*   `src/components/`: Reusable React components.
    *   `AuthForm.tsx`: Handles login/signup UI.
    *   `admin/`: Components for admin-specific UI sections.
    *   `client/`: Components for client-facing UI sections (`ClientBooking.tsx`).
*   `src/utils/`: Utility functions and Supabase client configurations.
    *   `supabase/client.ts`, `server.ts`, `admin.ts`: Supabase client initializers.
*   `README.md`: Project setup and instructions (including admin creation).
*   `overallguide.txt`: This file.
*   `supabasedbschema.png`: Image of the database schema.

**Known Issues / Recent Fixes:**

*   Admin booking view: Fixed duplicate error messages. Addressed 500 error fetching bookings by refactoring client data fetching in the API route (avoiding potentially problematic embedded select).
*   Client booking: Prevented booking slots on the current date by filtering in `/api/available-slots`.
*   Auth form: Separated Login and Sign Up views within the same component.

**Pet Management Implementation (In Progress):**
*   **API Routes Created:**
    *   `GET /api/pets`: Fetches pets for the logged-in client.
    *   `POST /api/pets`: Creates a new pet for the logged-in client.
    *   `PUT /api/pets/[petId]`: Updates a specific pet owned by the client.
    *   `DELETE /api/pets/[petId]`: Deletes a specific pet owned by the client.
    *   *(Note: API routes correctly fetch `clients.id` via `user_id` before interacting with `pets` table)*
*   **Next Step:** Create UI component (`src/components/client/PetManagement.tsx`) for clients to list, add, edit, delete pets.
*   **Future:** Handle initial pet creation during signup flow (likely client-side check after email confirmation). Integrate pet selection into booking process.

**Potential Next Steps / Areas for Development:**

1.  **Implement Pet Management UI:** Create the `PetManagement.tsx` component.
2.  **Refine Client Booking:**
    *   Improve UI/UX for selecting services/dates/slots.
    *   Handle booking confirmation/feedback more robustly.
    *   Integrate pet selection if necessary for bookings.
    *   Consider adding a "My Bookings" view for clients.
3.  **Payments:** Implement payment processing (e.g., Stripe integration) linked to bookings via the `payments` table.
4.  **Staff Features:** Enhance staff capabilities (e.g., assigning staff to bookings, viewing specific schedules).
5.  **Calendar View:** Implement a more visual calendar display for bookings (admin/staff).
6.  **Error Handling:** Improve global vs. local error handling/display throughout the UI.
7.  **Testing:** Add automated tests.

This guide provides context on the current architecture, implementation, and potential future directions.