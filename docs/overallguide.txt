Project Summary for AI Assistant (booking-and-accounts)

**Overall Goal:** Build a booking and multi-site management platform, initially for doggy daycare services, designed to be adaptable for other pet businesses.

**System Overview:**
- **Tech Stack:** Next.js (App Router), Supabase (Auth & PostgreSQL), React.
- **User Roles:** Admin, Staff, Client. Role-based access is enforced throughout the UI and API.
- **Data Fetching:** Data is primarily fetched within the relevant dashboard component (Admin, Staff, Client) after authentication and role determination, rather than being passed down from the main page.

**Key Features:**
- **Authentication:**
  - Supabase Auth for user sign-up/login.
  - Role-based access: roles are managed in the `staff` table (for staff/admin) and inferred for clients via the `clients` table.
  - Sign-up/Login UI (`src/components/AuthForm.tsx`) adapts fields for each mode.
  - Welcome message (`src/app/page.tsx`) displays user name (from profiles) instead of email.
- **Admin/Staff UI:**
  - **User Management (`src/components/admin/UserManagement.tsx`):**
    - View all staff/admin users.
    - Assign roles (client/staff/admin) via API.
    - Promote clients to staff/admin using an autocomplete search (server-side, via `/api/clients`).
    - Assign default vehicles to staff members.
  - **Client Management (`src/components/admin/ClientManagement.tsx`):**
    - Paginated, searchable list of clients (excludes staff/admin users).
    - Assign a default staff member to each client via a dropdown.
    - Displays default staff member name (or "Unassigned").
    - Edit client profiles (updates `clients` and `profiles` tables), manage their pets (add/edit/delete/confirm pets).
  - **Site & Field Management:** Create/view sites and fields.
  - **Service Management:**
    - Create/view services, including setting a mandatory `service_type` ('Field Hire' or 'Daycare').
    - Manage service availability rules.
    - Filter existing services by type in the UI.
  - **Booking Management:** Create/view bookings, link bookings to clients and pets.
  - **Vehicle Management:**
    - Admins can view/add/delete vehicles and assign them to staff.
    - Staff can view their own vehicles.
  - **Staff Availability Management:** UI needed to manage staff working hours/days off via `staff_availability` table.
- **Client UI:**
  - **Booking Interface (`src/components/client/ClientBooking.tsx`):**
    - Select service/date, view available slots (`/api/available-slots`).
    - Book services (no same-day bookings). Performs capacity/availability checks based on the rules defined in `service_availability` (using `use_staff_vehicle_capacity` flag) and `staff_availability`.
  - **Pet Management:**
    - Add/edit/delete pets, view all pets.
  - **My Bookings:**
    - View past/upcoming bookings, see details and linked pets.

**Database Schema Summary:**
- **auth.users:** Managed by Supabase Auth. Columns: id (uuid, PK), email, etc.
- **profiles:** user_id (uuid, PK, FK to users.id), first_name, last_name, phone, email_allow_promotional, email_allow_informational. (No business_type).
- **clients:** id (serial PK), user_id (uuid, FK to profiles.user_id), email, default_staff_id (integer, FK to staff.id). (No profile fields directly).
- **staff:** id (serial PK), user_id (uuid, FK to profiles.user_id), role (admin/staff), notes, default_vehicle_id (bigint, FK to vehicles.id).
- **staff_availability:** id (bigint PK), staff_id (integer, FK to staff.id), start_time, end_time, days_of_week (integer[]), specific_date (date), is_available (boolean), created_at, updated_at.
- **user_business_affiliations:** user_id (uuid, PK, FK to auth.users), business_type (TEXT, PK), created_at (timestamptz). Links users to business areas.
- **sites, fields, services, service_availability, bookings, booking_clients, pets, booking_pets, payments, vehicles:** See below for details.

**Table Details:**
- **profiles:** (See Schema Summary) - Does not contain `business_type`. Names/phone stored here.
- **user_business_affiliations:**
    - user_id (uuid, PK, FK to users.id)
    - business_type (TEXT, PK) - e.g., 'Pet Services', 'Field Hire'
    - created_at (timestamptz)
- **sites:** id, name, address, is_active
- **fields:** id, site_id (FK), name, field_type
- **services:** id, name, description, created_at, requires_field_selection, default_price, service_type (TEXT NOT NULL CHECK(service_type IN ('Field Hire', 'Daycare')))
- **service_availability:**
    - id (bigint PK)
    - service_id (FK)
    - field_ids (integer[] NOT NULL) -- Now always required
    - start_time, end_time (time without timezone)
    - days_of_week (integer[] | null) -- Array of numbers 1-7 (Mon-Sun)
    - specific_date (date | null)
    - use_staff_vehicle_capacity (boolean NOT NULL DEFAULT FALSE) -- If TRUE, capacity uses assigned staff vehicle; otherwise capacity is effectively unlimited unless further field/service constraints are applied.
    - is_active (boolean)
    - created_at (timestamptz)
    - override_price (numeric | null)
    - CHECK constraint: `use_staff_vehicle_capacity = TRUE OR (field_ids IS NOT NULL AND array_length(field_ids, 1) > 0)`
- **bookings:** id, field_id (FK), start_time, end_time, service_type (varchar), status, max_capacity, assigned_staff_id (uuid, FK to auth.users), vehicle_id (integer, FK to vehicles.id), assignment_notes, is_paid (boolean).
- **booking_clients:** id, booking_id (FK), client_id (FK)
- **pets:** id, client_id (FK), name, breed, size, is_confirmed
- **booking_pets:** id, booking_id (FK), pet_id (FK)
- **payments:** id, client_id (FK), booking_id (FK), amount, currency, status, created_at
- **vehicles:** id, make, model, year, color, license_plate, notes, pet_capacity.
- **staff_availability:** (See schema summary)

**Foreign Key Relationships:**
- profiles.user_id → users.id
- user_business_affiliations.user_id → auth.users.id
- clients.user_id → profiles.user_id
- clients.default_staff_id → staff.id
- staff.user_id → profiles.user_id
- staff.default_vehicle_id → vehicles.id
- staff_availability.staff_id → staff.id
- pets.client_id → clients.id
// - vehicles.staff_id → staff.id (This FK seems incorrect based on current usage - vehicles aren't directly linked to staff, staff have a default_vehicle_id)
- bookings.field_id → fields.id
- bookings.assigned_staff_id → auth.users.id
- bookings.vehicle_id → vehicles.id
- booking_clients.booking_id → bookings.id
- booking_clients.client_id → clients.id
- booking_pets.booking_id → bookings.id
- booking_pets.pet_id → pets.id

**API Route Reference:**
- **/api/users**
  - Purpose: Manage all users (admin, staff, client) and assign roles.
  - Usage: Used for role management and admin-level user queries.
  - Not for client search or client-specific data.
- **/api/clients**
  - **GET:**
    - Purpose: Fetch client data (search, pagination, profile, pets, default staff name).
    - Usage: Used for client lists and management in the UI.
    - Excludes users who are also present in the `staff` table.
    - Supports `search`, `limit`, `offset` query params. Returns `{ clients: [...], total: N }`. Includes flattened profile and `default_staff_name`.
    - Supports `assigned_staff_id=me` query param. If present and the user is authenticated staff, returns only clients where `clients.default_staff_id` matches the staff member's ID. Excludes `default_staff_name` in this mode.
  - **POST:** Create a new client record (Admin only).
- **/api/clients/[clientId]**
    - **GET:** Fetch specific client details including pets.
    - **PUT:** Update client details. Handles updates to both `clients` table (`email`, `default_staff_id`) and `profiles` table (`first_name`, `last_name`, `phone`) based on incoming data.
- **/api/staff**
  - **GET:** Fetches a list of staff members (`id`, `first_name`, `last_name`) excluding admins. Used for populating assignment dropdowns.
- **/api/staff/assignment**
  - **PATCH:** Assigns a `default_vehicle_id` to a staff member.
- **/api/vehicles**
  - GET: Admins fetch all vehicles or filter by staff; staff fetch their own vehicles.
  - POST: Admins add a new vehicle.
  - DELETE: Admins delete a vehicle by ID.
- **/api/pets**, **/api/pets/[petId]**, **/api/clients/[clientId]/pets**:
  - CRUD for pets, linked to clients.
  - `/api/clients/[clientId]/pets` specifically used by admin/staff to fetch a client's pets.
- **/api/bookings**, **/api/client-booking**, **/api/my-bookings**, **/api/bookings/[bookingId]/status**:
  - Bookings CRUD, client booking flow, viewing client bookings, updating payment status.
  - `POST /api/client-booking`: Handles client-initiated bookings. Performs capacity checks based on the matched `service_availability` rule:
      - Finds the active rule matching service/date/time.
      - If `use_staff_vehicle_capacity` is TRUE:
          - Checks client's `default_staff_id` is set, available (`staff_availability`), and has a default vehicle.
          - Sets `max_effective_capacity` to the vehicle's `pet_capacity`.
          - Checks overlaps based on bookings assigned to that specific staff member (`assigned_staff_id`).
          - Finds an available field from the rule's `field_ids` not fully booked by other services/staff.
          - Assigns the determined `field_id`, `assigned_staff_id`, and `vehicle_id` to the new booking.
      - If `use_staff_vehicle_capacity` is FALSE:
          - Sets `max_effective_capacity` to a very high number (effectively unlimited for this specific rule check).
          - Checks overlaps based on bookings in *any* of the rule's `field_ids`.
          - Determines `field_id` based on client selection (if `requires_field_selection`) or assigns the first available.
          - Sets `assigned_staff_id` and `vehicle_id` to `null`.
      - Compares requested pets against remaining capacity.
  - **/api/admin-booking**:
    - **POST:** Handles admin/staff-initiated bookings. Bypasses some standard checks.
    - **Pet Verification:** Checks that selected pets belong to the selected client but *does not* currently check if pets are marked as `is_active` or `is_confirmed`. This allows admins to book for any pet owned by the client.
- **/api/available-slots:**
  - Returns available booking slots for a service/date, requires auth.
  - Calls `calculate_available_slots` RPC, passing client's `default_staff_id`.
  - RPC returns potential time slots based on rules, including:
      - `slot_start_time`, `slot_end_time` (Now generated based on 'Europe/London' timezone)
      - `slot_remaining_capacity`: Calculated capacity based on rules/overlaps (NULL if unlimited).
      - `rule_uses_staff_capacity`: Boolean flag.
      - `associated_field_ids`: Array of field IDs for the slot.
  - RPC Capacity Logic:
      - If `rule_uses_staff_capacity`=TRUE: Checks availability/vehicle capacity/overlaps for the passed-in `in_client_default_staff_id`. Returns remaining vehicle capacity, or 0 if staff unavailable/no vehicle/all associated fields booked.
      - If `rule_uses_staff_capacity`=FALSE: Calculates remaining capacity based on total bookings across all `associated_field_ids` (no specific base limit applied at this level).
      - **Note:** The RPC returns slots even if the calculated `slot_remaining_capacity` is 0.
  - API formats capacity for display, filters out past slots, and returns the list.
  - Returns available booking slots for a service/date range, requires auth.
  - Fetches the service's `default_price`.
  - Fetches active `service_availability` rules for the service that could apply.
  - Calls `calculate_available_slots` RPC, passing client's `default_staff_id`.
  - RPC returns potential time slots based on rules, including:
      - `slot_start_time`, `slot_end_time`
      - `slot_remaining_capacity`: Calculated capacity based on rules/overlaps (NULL if unlimited).
      - `rule_uses_staff_capacity`: Boolean flag.
      - `associated_field_ids`: Array of field IDs for the slot.
  - RPC Capacity Logic:
      - If `rule_uses_staff_capacity`=TRUE:
          - Checks if the passed-in `in_client_default_staff_id` is set, has a default vehicle with `pet_capacity` > 0, and is generally available via `staff_availability` for the slot time.
          - If staff/vehicle checks pass: Calculates the total number of pets already assigned to the *same staff member* in other bookings that *overlap* with the potential `slot_start_time` and `slot_end_time`.
          - Subtracts the calculated `total_assigned_pets` from the staff's default vehicle `pet_capacity`.
          - Returns this difference as `slot_remaining_capacity` (minimum 0).
          - Returns 0 if staff is unavailable, has no vehicle, or vehicle capacity is 0.
          - **Note:** Associated fields (`associated_field_ids`) are returned for informational purposes or potential assignment later, but they **do not** impose a capacity limit in this mode. The vehicle capacity is the sole constraint.
      - If `rule_uses_staff_capacity`=FALSE:
          - Calculates remaining capacity based on total bookings across all `associated_field_ids` (no specific base limit applied at this level).
          - **Note:** The RPC returns slots even if the calculated `slot_remaining_capacity` is 0.
  - **API Route Processing:**
      - For each slot returned by the RPC, the API route determines the applicable price:
          - Finds the best matching active `service_availability` rule (specific date rule > recurring day rule).
          - Uses the rule's `override_price` if set, otherwise uses the service's `default_price` (defaults to 0 if neither is set).
      - Formats a `capacity_display` string for the UI.
      - Filters out slots starting today or earlier.
      - Returns the list of slots, including the calculated `price_per_pet`.
- **/api/fields, /api/sites, /api/services, /api/service-availability, /api/service-availability/[ruleId]**:
  - CRUD for fields, sites, services, and service availability rules.
  - `GET /api/services`: Returns services including `service_type`. Supports `?active=true` filter.
  - `POST /api/services`: Requires `name` and `service_type` ('Field Hire' or 'Daycare').
  - `PUT /api/services/[serviceId]`: Allows updating fields including `service_type`.
  - `service-availability` endpoints now handle `use_staff_vehicle_capacity` (boolean) instead of `capacity_type` and require `field_ids` (array). No longer uses `base_capacity`.

**Component/File Structure:**
- **src/app/page.tsx:** Main entry point.
  - Handles authentication state.
  - Fetches user profile (`profiles`) and business affiliations (`user_business_affiliations`).
  - Determines user role (`staff`, `client`, or `admin`).
  - Determines the *current* business context. **For now, it prioritizes 'Pet Services' if the user is affiliated.** Passes this context (`businessType`) to the relevant dashboard.
  - Renders the correct dashboard (Admin, Staff, Client) based on role.
- **src/components/admin/AdminDashboard.tsx:** Container for admin features. Fetches and manages state for users, sites, fields, services, vehicles, bookings, availability etc., needed for its child components (UserManagement, SiteFieldManagement, ServiceManagement...). Contains action handlers.
- **src/components/admin/UserManagement.tsx:** View staff/admin, assign roles/vehicles.
- **src/components/admin/ClientManagement.tsx:** List/search clients (clients only), assign default staff, manage client info/pets via modal. Fetches its own client data.
- **src/components/admin/BookingManagement.tsx:** Create/manage bookings (potentially allows override). Fetches its own data if needed.
- **src/components/admin/ServiceManagement.tsx:** Manage services. Includes dropdown for `service_type` on add/edit and filtering by type.
- **src/components/admin/SiteFieldManagement.tsx:** Manage sites/fields.
- **src/components/admin/ServiceAvailabilityManagement.tsx:** Manage service availability rules. UI updated to use `use_staff_vehicle_capacity` checkbox instead of `capacity_type`; field selection is always present. No longer uses `base_capacity` field.
- **src/components/client/ClientDashboard.tsx:** Container for client features.
  - Receives `user` and the current `businessType` context as props.
  - Fetches data relevant to the client view (e.g., profile details, services).
  - Uses the `businessType` prop to conditionally render UI elements (e.g., hides 'My Pets' navigation if `businessType` is 'Field Hire').
  - Contains child components like `ClientBooking`, `PetManagement`, `MyBookings`.
- **src/components/client/ClientBooking.tsx:** Client booking UI.
  - Fetches availability using `calculate_available_slots` RPC (which now uses 'Europe/London').
  - Displays slots in calendar and list format.
  - Uses `isSlotBookedBySelectedPets` to check for existing bookings for selected pets.
  - Disables slots in the list view and provides visual cues (text suffix) if already booked or full.
  - Uses `eventStyleGetter` in CalendarView to visually distinguish already booked slots (greyed out).
  - Slot selection (via calendar or list) uses the original timestamp string as the key for consistency.
  - Booking submission uses `POST /api/client-booking`.
- **src/components/client/PetManagement.tsx:** Client pet management UI.
- **src/components/client/MyBookings.tsx:** Client booking history/upcoming bookings.
- **src/components/staff/StaffDashboard.tsx:** Container for staff features. Fetches and manages state for bookings, services etc., needed for its child components.
  - **My Clients Tab:** Displays a list of clients for whom the logged-in staff member is the `default_staff_id`. Fetches data via `/api/clients?assigned_staff_id=me`. Shows client name, email, phone, and a nested list of their pets.
- **src/utils/auth-helpers.ts:** Centralized authentication/authorization helpers.
- **src/utils/supabase/client.ts, server.ts, admin.ts:** Supabase client initializers.

**SQL/Data Insertion Best Practices:**
- User signs up via `AuthForm`.
- `signup` server action calls `supabase.auth.signUp`, passing `first_name`, `last_name`, `phone`, and `business_type` (from the form dropdown) in `options.data`.
- `handle_new_user` trigger on `auth.users` table:
  - Inserts into `profiles` using metadata (`first_name`, `last_name`, `phone`).
  - Inserts into `clients` using `user_id` and `email`.
  - Inserts into `user_business_affiliations` using `user_id` and `business_type` from metadata.
- Only insert columns that exist in the table.
- Use `ON CONFLICT DO NOTHING` for idempotency where appropriate.
- `clients` table does not have `first_name`, `last_name`, `phone`, `created_at`.
- `staff` table gets names/phone via `profiles` join.

**Best Practices for LLMs/Developers:**
- **Multi-Frontend Architecture:** The system is designed for multiple frontends (e.g., `pet-services.app`, `field-hire.app`) sharing a single Supabase backend.
- **User Affiliation:** Use the `user_business_affiliations` table to check which business areas a user has access to.
- **Business Context:** Each frontend application is responsible for establishing its "business context" (e.g., 'Pet Services' or 'Field Hire'). UI elements and logic should be filtered based on both the user's affiliations and the current context.
- **Shared Resources:** The shared database allows resources like `fields` to be booked by users from different business contexts, with availability correctly tracked.
- Use `/api/clients` for client-only lists/search in UI.
- Use `/api/users` for role management and mixed user lists.
- Check schema and this document before writing SQL or API code.
- Check `service_availability` rules for the `use_staff_vehicle_capacity` flag to understand how capacity and overlap checks are performed for a given service/time.

**Data Consistency & Schema Verification:**
- It's crucial to ensure TypeScript types (`src/types.ts`), API logic, and the actual PostgreSQL database schema remain synchronized.
- Discrepancies can lead to runtime errors (e.g., querying non-existent columns like `pets.is_active` was encountered).
- **Always verify column names and existence directly in the Supabase dashboard (Table Editor or SQL Editor) or via migration files** before relying on them in code or types.
- Update types and documentation promptly after schema changes.

**Calendar Component (`src/components/shared/CalendarView.tsx`)**
- **Purpose:** Provides a reusable calendar interface for displaying date-based data like bookings, availability, or schedules.
- **Technology:** Built using `react-big-calendar` and `date-fns`.
- **Features:**
  - Supports Monthly, Weekly, and Daily views (Week view used in ClientBooking).
  - Includes built-in navigation.
  - Accepts an array of events (`CalendarEvent[]`) to display data points.
  - Configured to show time range 6am-6pm.
  - Requires mapping data to the `CalendarEvent` interface (`{ id, title, start: Date, end: Date, resource?: unknown }`).
  - `resource` object used to store `rawStartTime` for consistent key handling.
  - Callback props for user interaction:
    - `onSelectSlot` (currently unused in ClientBooking).
    - `onSelectEvent` (used in ClientBooking to select slots).
    - `eventStyleGetter` (used in ClientBooking to style available vs. already booked slots).
- **Usage:**
  - Import `CalendarView` and the `CalendarEvent` type.
  - Fetch the relevant data (e.g., bookings for a staff member).
  - Map the fetched data to an array of `CalendarEvent` objects.
  - Pass the event array to the `events` prop.
  - Provide handler functions to `onSelectSlot` and `onSelectEvent` for desired interactions.
- **Initial Implementation:** Integrated into `src/components/staff/StaffDashboard.tsx` under the "My Schedule" tab.

**See emailguide.txt for email specific info**

