Project Summary for AI Assistant (booking-and-accounts)

**Overall Goal:** Build a booking and multi-site management platform, initially for doggy daycare services, designed to be adaptable for other pet businesses.

**System Overview:**
- **Tech Stack:** Next.js (App Router), Supabase (Auth & PostgreSQL), React.
- **User Roles:** Admin, Staff, Client. Role-based access is enforced throughout the UI and API.

**Key Features:**
- **Authentication:**
  - Supabase Auth for user sign-up/login.
  - Role-based access: roles are managed in the `staff` table (for staff/admin) and inferred for clients via the `clients` table.
  - Sign-up/Login UI (`src/components/AuthForm.tsx`) adapts fields for each mode.
- **Admin/Staff UI:**
  - **User Management (`src/components/admin/UserManagement.tsx`):**
    - View all staff/admin users.
    - Assign roles (client/staff/admin) via API.
    - Promote clients to staff/admin using an autocomplete search (server-side, via `/api/clients`).
  - **Client Management (`src/components/admin/ClientManagement.tsx`):**
    - Paginated, searchable list of clients (15 per page, server-side search via `/api/clients`).
    - Edit client profiles, manage their pets (add/edit/delete/confirm pets).
  - **Site & Field Management:** Create/view sites and fields.
  - **Service Management:** Create/view services and their availability rules.
  - **Booking Management:** Create/view bookings, link bookings to clients and pets.
  - **Vehicle Management:**
    - Admins can view/add/delete vehicles and assign them to staff.
    - Staff can view their own vehicles.
- **Client UI:**
  - **Booking Interface:**
    - Select service/date, view available slots (`/api/available-slots`).
    - Book services (no same-day bookings).
  - **Pet Management:**
    - Add/edit/delete pets, view all pets.
  - **My Bookings:**
    - View past/upcoming bookings, see details and linked pets.

**Database Schema Summary:**
- **auth.users:** Managed by Supabase Auth. Columns: id (uuid, PK), email, etc.
- **profiles:** user_id (uuid, PK, FK to users.id), first_name, last_name, phone.
- **clients:** id (serial PK), user_id (uuid, FK to profiles.user_id), email. (No first_name, last_name, phone, or created_at columns.)
- **staff:** id (serial PK), user_id (uuid, FK to profiles.user_id), role (admin/staff), name, phone_number, notes.
- **sites, fields, services, service_availability, bookings, booking_clients, pets, booking_pets, payments, vehicles:** See below for details.

**Table Details:**
- **sites:** id, name, address, is_active
- **fields:** id, site_id (FK), name, capacity, field_type
- **services:** id, name, description, created_at, requires_field_selection
- **service_availability:** id, service_id (FK), field_ids (array), start_time, end_time, days_of_week, specific_date, base_capacity, is_active, created_at
- **bookings:** id, field_id (FK), start_time, end_time, service_type, status, max_capacity, assigned_staff_id (uuid, FK), vehicle_id (FK), assignment_notes
- **booking_clients:** id, booking_id (FK), client_id (FK)
- **pets:** id, client_id (FK), name, breed, size, is_confirmed
- **booking_pets:** id, booking_id (FK), pet_id (FK)
- **payments:** id, client_id (FK), booking_id (FK), amount, currency, status, created_at
- **vehicles:** id, staff_id (FK), make, model, year, color, license_plate, notes

**Foreign Key Relationships:**
- profiles.user_id → users.id
- clients.user_id → profiles.user_id
- staff.user_id → profiles.user_id
- pets.client_id → clients.id
- vehicles.staff_id → staff.id
- bookings.field_id → fields.id
- booking_clients.booking_id → bookings.id
- booking_clients.client_id → clients.id
- booking_pets.booking_id → bookings.id
- booking_pets.pet_id → pets.id

**API Route Reference:**
- **/api/users**
  - Purpose: Manage all users (admin, staff, client) and assign roles.
  - Usage: Used for role management and admin-level user queries.
  - Not for client search or client-specific data.
- **/api/clients**
  - Purpose: Manage client-specific data (search, pagination, profile, pets).
  - Usage: Used for all client search/autocomplete, paginated client lists, and client management in the UI.
  - Supports `search`, `limit`, and `offset` query params for server-side filtering and pagination. Returns `{ clients: [...], total: N }`.
- **/api/vehicles**
  - GET: Admins fetch all vehicles or filter by staff; staff fetch their own vehicles.
  - POST: Admins add a new vehicle and assign to staff.
  - DELETE: Admins delete a vehicle by ID.
- **/api/pets**
  - GET: Fetch pets for the logged-in client.
  - POST: Create a new pet for the logged-in client.
  - /api/pets/[petId]: GET, PUT, DELETE for a specific pet.
- **/api/bookings, /api/client-booking, /api/my-bookings:**
  - Bookings CRUD, client booking, and viewing bookings for the logged-in client.
- **/api/available-slots:**
  - Returns available booking slots for a service/date.
- **/api/fields, /api/sites, /api/services, /api/service-availability:**
  - CRUD for fields, sites, services, and service availability rules.

**Component/File Structure:**
- **src/app/page.tsx:** Main entry point, renders UI based on auth/role.
- **src/components/admin/UserManagement.tsx:**
  - View staff/admin users, assign roles, promote clients (autocomplete, server-side search).
- **src/components/admin/ClientManagement.tsx:**
  - Paginated/searchable client list, edit client, manage pets.
- **src/components/admin/BookingManagement.tsx:** Create/manage bookings.
- **src/components/admin/ServiceManagement.tsx:** Manage services.
- **src/components/admin/SiteFieldManagement.tsx:** Manage sites/fields.
- **src/components/admin/ServiceAvailabilityManagement.tsx:** Manage service availability.
- **src/components/client/ClientBooking.tsx:** Client booking UI.
- **src/components/client/PetManagement.tsx:** Client pet management UI.
- **src/components/client/MyBookings.tsx:** Client booking history/upcoming bookings.
- **src/utils/auth-helpers.ts:** Centralized authentication/authorization helpers.
- **src/utils/supabase/client.ts, server.ts, admin.ts:** Supabase client initializers.

**SQL/Data Insertion Best Practices:**
- Insert users into `auth.users` first, then `profiles`, then `clients`.
- Only insert columns that exist in the table (see schema above).
- Use `ON CONFLICT DO NOTHING` for idempotency and to avoid duplicate errors.
- For demo data, do not include `first_name`, `last_name`, `phone`, or `created_at` in `clients` inserts—these belong in `profiles`.

**Best Practices for LLMs/Developers:**
- Use `/api/clients` for all client search, autocomplete, and paginated lists in the UI.
- Use `/api/users` only for role management and admin-level user queries.
- Always check the schema (see above or docs/tables.csv) before writing SQL or API code.
- Reference this document for table/column names, relationships, and API route purposes before searching the codebase.